;; -*- lexical-binding: t -*-
;; Emacs Configuration File

;; Defer package initialization until needed
(setq package-enable-at-startup nil)  ;; Don't load packages at startup
(require 'package)
(setq package-archives
      '(("melpa" . "https://melpa.org/packages/")
        ("gnu" . "https://elpa.gnu.org/packages/")
        ("org" . "https://orgmode.org/elpa/")))
(package-initialize)

;; Ensure `use-package` is installed, but defer loading
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
(eval-when-compile
  (require 'use-package))  ;; Compile-time only
(setq use-package-always-ensure t
      use-package-compute-statistics t)  ;; Optional: Track load times

;; UI Enhancements (minimize overhead)
(set-face-attribute 'default nil :font "Ubuntu Sans Mono-12")
(setq inhibit-startup-screen t)
(menu-bar-mode -1)  ;; Disable menu bar for speed
(tool-bar-mode -1)  ;; Disable toolbar
(scroll-bar-mode -1)  ;; Disable scroll bars

;; Custom Faces for Syntax Highlighting (load eagerly, but lightweight)
(custom-set-faces
 '(default ((t (:background "#1c1c1c" :foreground "#FFFFFF"))))
 '(font-lock-comment-face ((t (:foreground "#6ACA55"))))
 '(font-lock-constant-face ((t (:foreground "#B5CEA8"))))
 '(font-lock-function-name-face ((t (:foreground "#f27255"))))
 '(font-lock-keyword-face ((t (:foreground "#00add8" :weight bold))))
 '(font-lock-string-face ((t (:foreground "#D69D85"))))
 '(font-lock-type-face ((t (:foreground "#80cfb3"))))
 '(font-lock-variable-name-face ((t (:foreground "#f5d469"))))
 '(line-number ((t (:foreground "#636363"))))
 '(line-number-current-line ((t (:foreground "#FFFFFF" :weight bold))))
 '(rainbow-delimiters-depth-1-face ((t (:foreground "#D4D4D4"))))
 '(rainbow-delimiters-depth-2-face ((t (:foreground "#569CD6"))))
 '(rainbow-delimiters-depth-3-face ((t (:foreground "#DCDCAA"))))
 '(rainbow-delimiters-depth-4-face ((t (:foreground "#C586C0"))))
 '(rainbow-delimiters-depth-5-face ((t (:foreground "#9CDCFE"))))
 '(rainbow-delimiters-depth-6-face ((t (:foreground "#4EC9B0"))))
 '(rainbow-delimiters-depth-7-face ((t (:foreground "#CE9178"))))
 '(rainbow-delimiters-depth-8-face ((t (:foreground "#B5CEA8"))))
 '(rainbow-delimiters-depth-9-face ((t (:foreground "#D16969"))))
 '(rainbow-delimiters-unmatched-face ((t (:background "#FF0000" :foreground "#FFFFFF" :weight bold))))
 '(region ((t (:background "#414141"))))
 '(show-paren-match ((t (:foreground "#FEA600" :weight bold :underline t))))
 '(show-paren-mismatch ((t (:background "#FF0000" :foreground "#FFFFFF" :weight bold))))
 '(whitespace-tab ((t (:foreground "#3e4042" :background "unspecified" :weight light))))
)

;; Load built-in theme directly (no use-package needed)
(load-theme 'deeper-blue t)

;; Ensure syntax highlighting (minimal overhead)
(global-font-lock-mode 1)
(add-hook 'prog-mode-hook #'font-lock-ensure :depth 90)  ;; Lower priority

;; Display Settings (optimize line numbers)
(use-package display-line-numbers
  :defer t
  :init (global-display-line-numbers-mode 1)
  :config
  (setq display-line-numbers-width-start t
        display-line-numbers 'absolute))
(column-number-mode 1)

;; Minimal Scrolling (optimized)
(setq scroll-margin 1
      scroll-conservatively 101  ;; Higher value for smoother scrolling
      scroll-step 1
      scroll-preserve-screen-position t
      redisplay-skip-fontification-on-input t)  ;; Skip fontification during input

;; Whitespace Mode (defer and optimize)
(use-package whitespace
  :defer t
  :init (global-whitespace-mode 1)
  :config
  (setq whitespace-style '(face tabs tab-mark trailing)
        whitespace-display-mappings '((tab-mark 9 [124 9] [92 9]))))

;; Electric Pair Mode (lightweight)
(electric-pair-mode 1)

;; Rainbow Delimiters (defer loading)
(use-package rainbow-delimiters
  :defer t
  :hook (prog-mode . rainbow-delimiters-mode))

;; Highlight Comment Delimiters (optimized)
(defun highlight-comment-delimiters ()
  "Make comment symbols inherit the comment text color in programming modes."
  (font-lock-add-keywords
   nil '(("\(//+\|#\|;\|/\*+\|\*/\|<!--\|-->\)" 1 'font-lock-comment-face t))))
(add-hook 'prog-mode-hook #'highlight-comment-delimiters :depth 90)

;; C-style indentation
(setq c-default-style "bsd"
      c-basic-offset 8
      tab-width 8
      indent-tabs-mode t)

;; Python Mode (defer)
(use-package python
  :defer t
  :mode ("\\.py\\'" . python-mode)
  :config
  (setq python-indent-offset 4
        tab-width 4
        indent-tabs-mode nil)
  (add-hook 'python-mode-hook (lambda () (setq tab-width 4))))

;; Go Mode (defer)
(use-package go-mode
  :defer t
  :mode ("\\.go\\'" . go-mode)
  :init
  (setenv "GOPATH" "/home/smuca/go")
  (setenv "GOROOT" "/usr/local/go")
  (add-to-list 'exec-path "/usr/local/go/bin")
  :config
  (defun go-custom-setup ()
    "Custom Go setup."
    (setq tab-width 4 indent-tabs-mode t)
    (add-hook 'before-save-hook #'gofmt-before-save nil t))
  :hook (go-mode . go-custom-setup))

;; JavaScript Mode (defer)
(use-package js2-mode
  :defer t
  :mode ("\\.js\\'" . js2-mode)
  :hook (js2-mode . js2-highlight-vars-mode)
  :config
  (setq js2-highlight-level 3
        js-indent-level 2)
  (add-hook 'js2-mode-hook
            (lambda ()
              (set (make-local-variable 'comment-start) "// ")
              (set (make-local-variable 'comment-end) ""))))

;; Web Mode (defer)
(use-package web-mode
  :defer t
  :mode ("\\.js\\'" "\\.jsx\\'" "\\.ts\\'" "\\.tsx\\'")
  :config
  (setq web-mode-code-indent-offset 2
        web-mode-markup-indent-offset 2))

;; Messages Buffer Color (defer execution)
(defun customize-messages-buffer-color ()
  "Set *Messages* buffer text color to green."
  (with-current-buffer "*Messages*"
    (face-remap-add-relative 'default '(:foreground "green"))))
(add-hook 'messages-buffer-mode-hook #'customize-messages-buffer-color :depth 90)

;; General Settings
(setq make-backup-files nil
      gc-cons-threshold 100000000)  ;; Increase GC threshold for speed

;; Show Paren Mode (lightweight)
(show-paren-mode 1)
(setq show-paren-delay 0
      show-paren-style 'parenthesis)

;; Custom Variables
(custom-set-variables
 '(package-selected-packages
   '(emmet-mode cc-cedict flycheck web-mode-edit-element web-mode tree-sitter-langs tree-sitter-ispell rainbow-delimiters highlight-parentheses highlight-defined go-mode format-all doom-themes dash)))

;; Optional: Enable Emacs daemon for instant client startup
;; Run `emacs --daemon` and use `emacsclient -t` to connect
;; this is custom key biding for copy the entire like like c-k but doesn't cut it
(global-set-key (kbd "C-c l")
  (lambda ()
    (interactive)
    (kill-ring-save (line-beginning-position) (line-beginning-position 2))
    (message "Line copied!")))
